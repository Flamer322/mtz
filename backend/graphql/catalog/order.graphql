extend type Mutation {
    createOrder(input: CreateOrderInput): CreateOrderPayload @field(resolver: "Catalog\\CreateOrderMutation") @guard

    order(id: ID! @eq @rules(apply: ["required", "integer", "exists:App\\Catalog\\Entity\\Order,id"])): Order! @find
}

type Order @model(class: "App\\Catalog\\Entity\\Order") {
    id: Int!
    buyer_company: ClientCompany @belongsTo(relation: "buyerCompany")
    payer_company: ClientCompany! @belongsTo(relation: "payerCompany")
    recipient_company: ClientCompany! @belongsTo(relation: "recipientCompany")
    contact_name: String
    contact_phone: String
    contact_email: String
    document_type: String
    comment: String
    end_user_of_product: String
    delivery_date: String
    status: String @method(name: "status")
    lines: [OrderLine] @hasMany
    files: [Media] @method(name: "files")
}

input CreateOrderInput @validator(class: "Catalog\\CreateOrderValidator") {
    buyerCompany: Int!
    payerCompany: Int!
    recipientCompany: Int!
    contactName: String
    contactPhone: String
    contactEmail: String
    documentType: String
    comment: String
    endUserOfProduct: String
    deliveryDate: String
    lines: [CreateOrderLineInput]
    files: [Upload!]
}

input CreateOrderLineInput @validator(class: "Catalog\\CreateOrderLineValidator") {
    product: Int!
    quantity: Int!
}

type CreateOrderPayload {
    id: Int!
}
